#!/usr/bin/env python3

import codecs
import gmpy2
import re
import socket
import sys

sys.setrecursionlimit(1000000)


def solve(a, b):
    # find solution for ax + by == 1 that 0 < x < n

    if a == 0:
        return (0, 1)

    x, y = solve(b % a, a)

    x, y = y - (b // a) * x, x

    while x < 0:
        x += b
        y -= a

    return (x, y)


def inverse(a, n):
    # find x such that ax == 1 (mod n)

    x, y = solve(a, n)
    return x


def solve_crt(arr, mod):
    # find x that is equal to arr[i] modulo mod[i]

    result = 0

    product = 1
    for n in mod:
        product *= n

    for i in range(len(mod)):
        for j in range(i):
            arr[i] = (arr[i] - arr[j]) * inverse(mod[j], mod[i]) % mod[i]
            if arr[i] < 0:
                arr[i] += mod[i]

    result = 0
    product = 1

    for m, n in zip(arr, mod):
        result += m * product
        product *= n

    return result % product


mods = []
rems = []

RE_MOD = re.compile(r"^    n = (\d+)$", re.MULTILINE)
RE_REM = re.compile(r"^    (\d+)$", re.MULTILINE)

for i in range(17):
    print(i, "of 17 values found", end='\r', flush=True)
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("ugractf.ru", 5001))

    data = b""

    while not b"Thank you" in data:
        data += s.recv(1024)

    data = data.decode()

    mod = RE_MOD.findall(data)[0]
    rem = RE_REM.findall(data)[0]
    mods.append(int(mod))
    rems.append(int(rem))

print("Computing answer...   ", end='\r', flush=True)
answer = solve_crt(rems, mods)

print("message ** 17 =", answer)

root = int(gmpy2.iroot(gmpy2.mpz(answer), 17)[0])
print("[int] message =", root, flush=True)

hex_encoded = hex(root)[2:]
flag = codecs.decode(hex_encoded, "hex")
print("message =", flag.decode(), flush=True)
